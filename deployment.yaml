apiVersion: v1
kind: Namespace
metadata:
  name: argocd
  labels:
    name: argocd
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: argocd-nfs-pv
  labels:
    app: argocd
    type: nfs
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs-storage
  nfs:
    path: /data/app1/argocd/postgresql
    server: 10.0.0.135
  mountOptions:
    - nfsvers=4.1
    - noatime
    - nodiratime
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: argocd-postgresql-pvc
  namespace: argocd
  labels:
    app: argocd-postgresql
spec:
  storageClassName: nfs-storage
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  selector:
    matchLabels:
      app: argocd
      type: nfs
---
# ArgoCD Required Secrets (no pre-set password)
apiVersion: v1
kind: Secret
metadata:
  name: argocd-secret
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-secret
    app.kubernetes.io/part-of: argocd
type: Opaque
data:
  server.secretkey: c2VjcmV0LWtleS1mb3ItYXJnb2NkLXNlcnZlci0xMjM0NTY3ODkw
  server.secret: c2VjcmV0LWZvci1hcmdvY2Qtc2VydmVyLWF1dGgxMjM0NTY3OA==
---
apiVersion: v1
kind: Secret
metadata:
  name: argocd-notifications-secret
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications-secret
    app.kubernetes.io/part-of: argocd
type: Opaque
data:
  webhook-token: d2ViaG9vay10b2tlbi1mb3Itbm90aWZpY2F0aW9ucy0xMjM0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  url: "http://argocd-server.argocd.svc.cluster.local"
  application.instanceLabelKey: argocd.argoproj.io/instance
  admin.enabled: "true"
  accounts.admin: apiKey, login
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-rbac-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-rbac-cm
    app.kubernetes.io/part-of: argocd
data:
  policy.csv: |
    g, admin, role:admin
    g, system:cluster-admins, role:admin
  policy.default: role:readonly
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications-cm
    app.kubernetes.io/part-of: argocd
data:
  notifiers.yaml: |
    {}
  service.webhook.argocd: |
    url: https://localhost:8080
---
# CRDs
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: applications.argoproj.io
  labels:
    app.kubernetes.io/name: applications.argoproj.io
    app.kubernetes.io/part-of: argocd
spec:
  group: argoproj.io
  names:
    kind: Application
    listKind: ApplicationList
    plural: applications
    singular: application
    shortNames:
    - app
    - apps
  scope: Namespaced
  versions:
  - name: v1alpha1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: appprojects.argoproj.io
  labels:
    app.kubernetes.io/name: appprojects.argoproj.io
    app.kubernetes.io/part-of: argocd
spec:
  group: argoproj.io
  names:
    kind: AppProject
    listKind: AppProjectList
    plural: appprojects
    singular: appproject
  scope: Namespaced
  versions:
  - name: v1alpha1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
---
# ServiceAccount & RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-server
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argocd-server
  labels:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["argoproj.io"]
  resources: ["applications", "appprojects"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-server
  labels:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
subjects:
- kind: ServiceAccount
  name: argocd-server
  namespace: argocd
roleRef:
  kind: ClusterRole
  name: argocd-server
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-server
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "secrets", "configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["argoproj.io"]
  resources: ["applications", "appprojects"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-server
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
subjects:
- kind: ServiceAccount
  name: argocd-server
  namespace: argocd
roleRef:
  kind: Role
  name: argocd-server
  apiGroup: rbac.authorization.k8s.io
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-postgresql
  namespace: argocd
  labels:
    app: argocd-postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: argocd-postgresql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: argocd-postgresql
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: init-permissions
        image: alpine
        command: ['sh', '-c']
        args:
          - |
            echo "Initializing NFS directory permissions..."
            chown -R 999:999 /var/lib/postgresql/data
            chmod -R 750 /var/lib/postgresql/data
            ls -la /var/lib/postgresql/data/
            echo "Directory ready"
        volumeMounts:
        - name: postgresql-storage
          mountPath: /var/lib/postgresql/data
      containers:
      - name: postgresql
        image: postgres:13-alpine
        env:
        - name: POSTGRES_DB
          value: argocd
        - name: POSTGRES_USER
          value: argocd
        - name: POSTGRES_PASSWORD
          value: argocd
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgresql-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command: ["sh", "-c", "exec pg_isready -U argocd -h 127.0.0.1 -p 5432"]
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command: ["sh", "-c", "exec pg_isready -U argocd -h 127.0.0.1 -p 5432"]
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: postgresql-storage
        persistentVolumeClaim:
          claimName: argocd-postgresql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: argocd-postgresql
  namespace: argocd
  labels:
    app: argocd-postgresql
spec:
  selector:
    app: argocd-postgresql
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP
---
# ArgoCD Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-server
  namespace: argocd
  labels:
    app: argocd-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: argocd-server
  template:
    metadata:
      labels:
        app: argocd-server
    spec:
      serviceAccountName: argocd-server
      initContainers:
      - name: wait-for-postgres
        image: postgres:13-alpine
        command:
          - sh
          - -c
          - |
            until pg_isready -h argocd-postgresql -p 5432 -U argocd; do
              echo "Waiting for PostgreSQL..."
              sleep 5
            done
      containers:
      - name: argocd-server
        image: argoproj/argocd:latest
        command: ["argocd-server"]
        args:
          - --insecure
        ports:
        - containerPort: 8080
        env:
        - name: ARGOCD_API_SERVER
          value: "0.0.0.0:8080"
        - name: ARGOCD_DATABASE_URL
          value: "postgres://argocd:argocd@argocd-postgresql:5432/argocd"
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        startupProbe:
          httpGet:
            path: /healthz
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  name: argocd-server
  namespace: argocd
  labels:
    app: argocd-server
spec:
  selector:
    app: argocd-server
  ports:
  - name: http
    port: 80
    targetPort: 8080
    nodePort: 30006
  - name: https
    port: 443
    targetPort: 8081
  type: NodePort

